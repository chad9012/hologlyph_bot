'''
# Team ID:          2649
# Theme:            Hologlyph Bots
# Author List:      Chandan Singh Chauhan
# Filename:         bonus_controller_bot2.py
# Functions:        update_goal,update_goal_array, inverse_kinematics, convert_to_servo_scaled publish_data, current_pose_subscription_callback
# Global variables: None
'''

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Pose2D
from std_msgs.msg import Int64
import math
from std_msgs.msg import Bool
import time

class ControllerBot1Node(Node):

    '''
    Purpose:
    ---
    Class to control Bot1 including its movement and pen status.

    Variables:
    ---
    current_x : float
        Current x-coordinate of Bot1.
    current_y : float
        Current y-coordinate of Bot1.
    current_theta : float
        Current orientation angle of Bot1.
    goal_x : float
        X-coordinate of the current goal position.
    goal_y : float
        Y-coordinate of the current goal position.
    goal_array : list
        Array containing coordinates of all the goals.
    current_goal_index : int
        Index of the current goal position.
    kp : float
        Proportional gain constant.
    self.flag: Bool
        to initialize the pen down motion syncronizely for all three bots
    current_goal_array_index: int
        tells at which number of contour we are in 
    self.number_of_countours: int
        tells how many countours will be drawn by this bot
    self.point_jump: int 
        give the number of goal points to jump in each of countour  
    '''

    def __init__(self):
        super().__init__("controller_bot2")
        self.current_pose_subscription = self.create_subscription(Pose2D, "/pen2_pose", self.current_pose_subscription_callback, 10)
        self.wheel_velocity_publisher = self.create_publisher(Int64, "bot2WheelVelocity", 10)
        
        # bot2_status is for telling the information that this bot has completed it's run and then creating the server /Stop_Flag to stop evaluator
        self.completion_publisher=self.create_publisher(Bool,"bot2_status",10)
        
        #this is for telling initilizer code that it has reached it's starting position and now bot will do pen down move if it get True from initial_reach 
        self.bot2_initial_publisher=self.create_publisher(Bool,"bot2_initial",10)
        self.inital_reach_publisher=self.create_subscription(Bool,"initial_reach",self.initial_reach_callback,10)


        self.pen_pose_publisher = self.create_publisher(Bool,"/pen2_down",10)
        
        self.current_x = 0
        self.current_y = 0
        self.current_theta = 0

        self.goal_theta = 0
        self.left_wheel_velocity = 0
        self.right_wheel_velocity = 0
        self.rear_wheel_velocity = 0
        self.kp = 0.04
        self.current_goal_array_index=0
        self.number_of_countours=9

        self.Countour24=[[154, 280], [153, 279], [152, 278], [151, 277], [150, 276], [149, 275], [148, 274], [147, 273], [146, 272], [146, 271], 
            [145, 270], [145, 269], [144, 268], [143, 267], [142, 266], [142, 265], [141, 264], [140, 263], [139, 262], [139, 261], 
            [138, 260], [138, 259], [137, 258], [136, 257], [136, 256], [135, 255], [134, 254], [134, 253], [133, 252], [133, 251], 
            [132, 250], [132, 249], [131, 248], [131, 247], [131, 246], [130, 245], [129, 244], [129, 243], [128, 242], [128, 241], 
            [128, 240], [127, 239], [127, 238], [126, 237], [126, 236], [126, 235], [126, 234], [125, 233], [125, 232], [124, 231], 
            [124, 230], [124, 229], [123, 228], [123, 227], [123, 226], [123, 225], [122, 224], [122, 223], [122, 222], [121, 221], 
            [121, 220], [121, 219], [121, 218], [121, 217], [120, 216], [120, 215], [120, 214], [120, 213], [120, 212], [120, 211], 
            [119, 210], [119, 209], [119, 208], [119, 207], [119, 206], [119, 205], [118, 204], [118, 203], [118, 202], [118, 201], 
            [118, 200], [118, 199], [118, 198], [118, 197], [118, 196], [118, 195], [118, 194], [118, 193], [118, 192], [118, 191], 
            [118, 190], [118, 189], [118, 188], [118, 187], [118, 186], [118, 185], [118, 184], [118, 183], [118, 182], [118, 181], 
            [118, 180], [118, 179], [118, 178], [118, 177], [118, 176], [118, 175], [118, 174], [118, 173], [118, 172], [118, 171], 
            [118, 170], [118, 169], [118, 168], [119, 167], [119, 166], [119, 165], [119, 164], [119, 163], [119, 162], [119, 161], 
            [119, 160], [119, 159], [119, 158], [120, 157], [120, 156], [120, 155], [120, 154], [120, 153], [121, 152], [121, 151], 
            [121, 150], [121, 149], [121, 148], [121, 147], [121, 146], [122, 145], [122, 144], [122, 143], [122, 142], [123, 141], 
            [123, 140], [123, 139], [123, 138], [123, 137], [124, 136], [124, 135], [125, 134], [125, 133], [125, 132], [125, 131], 
            [126, 130], [126, 129], [126, 128], [126, 127], [127, 126], [128, 125], [128, 124], [128, 123], [129, 122], [129, 121], 
            [130, 120], [130, 119], [131, 118], [131, 117], [132, 116], [132, 115], [133, 114], [133, 113], [134, 112], [134, 111], 
            [135, 110], [135, 109], [136, 108], [136, 107], [137, 106], [138, 105], [138, 104], [139, 103], [140, 102], [140, 101], 
            [141, 100], [142, 99], [143, 98], [143, 97], [144, 96], [145, 95], [146, 94], [147, 93], [148, 92], [149, 91], [150, 90], 
            [151, 89], [152, 88], [153, 87], [154, 86], [155, 85], [156, 84], [157, 84], [158, 83], [159, 82], [160, 81], [161, 80], 
            [162, 80], [163, 79], [164, 79], [165, 78], [166, 77], [167, 77], [168, 76], [169, 75], [170, 75], [171, 74], [172, 74], 
            [173, 73], [174, 73], [175, 72], [176, 72], [177, 71], [178, 71], [179, 70], [180, 70], [181, 70], [182, 69], [183, 69], 
            [184, 68], [185, 68], [186, 67], [187, 67], [188, 67], [189, 67], [190, 66], [191, 66], [192, 66], [193, 65], [194, 65], 
            [195, 65], [196, 64], [197, 64], [198, 64], [199, 64], [200, 63], [201, 63], [202, 63], [203, 63], [204, 62], [205, 62], 
            [206, 62], [207, 62], [208, 62], [209, 61], [210, 61], [211, 61], [212, 61], [213, 61], [214, 61], [215, 60], [216, 60], 
            [217, 60], [218, 60], [219, 60], [220, 60], [221, 59], [222, 59], [223, 59], [224, 59], [225, 59], [226, 59], [227, 59], 
            [228, 59], [229, 59], [230, 59], [231, 59], [232, 59], [233, 59], [234, 59], [235, 59], [236, 58], [237, 58], [238, 58], 
            [239, 58], [240, 58], [241, 58], [242, 58], [243, 58], [244, 58], [245, 58], [246, 58], [247, 58], [248, 58], [249, 58], 
            [250, 58], [251, 58], [252, 58], [253, 58], [254, 58], [255, 58], [256, 58], [257, 58], [258, 58], [259, 58], [260, 58], 
            [261, 58], [262, 58], [263, 58], [264, 59], [265, 59], [266, 59], [267, 59], [268, 59], [269, 59], [270, 59], [271, 59], 
            [272, 59], [273, 59], [274, 59], [275, 59], [276, 59], [277, 59], [278, 59], [279, 60], [280, 60], [281, 60], [282, 60], 
            [283, 60], [284, 60], [285, 60], [286, 61], [287, 61], [288, 61], [289, 61], [290, 61], [291, 61], [292, 62], [293, 62], 
            [294, 62], [295, 62], [296, 62], [297, 63], [298, 63], [299, 63], [300, 64], [301, 64], [302, 64], [303, 64], [304, 64], 
            [305, 65], [306, 65], [307, 65], [308, 66], [309, 66], [310, 66], [311, 67], [312, 67], [313, 67], [314, 68], [315, 68], 
            [316, 68], [317, 69], [318, 69], [319, 70], [320, 70], [321, 71], [322, 71], [323, 72], [324, 72], [325, 72], [326, 73], 
            [327, 73], [328, 74], [329, 74], [330, 75], [331, 76], [332, 76], [333, 77], [334, 77], [335, 78], [336, 79], [337, 79], 
            [338, 80], [339, 81], [340, 81], [341, 82], [342, 83], [343, 84], [344, 85], [345, 85], [346, 86], [347, 87], [348, 88], 
            [349, 89], [350, 90], [351, 91], [352, 92], [353, 93], [354, 94], [354, 95], [355, 96], [356, 97], [357, 98], [358, 99], 
            [359, 100], [359, 101], [360, 102], [361, 103], [361, 104], [362, 105], [363, 106], [363, 107], [364, 108], [364, 109], 
            [365, 110], [365, 111], [366, 112], [366, 113], [367, 114], [367, 115], [368, 116], [368, 117], [369, 118], [369, 119], 
            [370, 120], [370, 121], [371, 122], [371, 123], [371, 124], [372, 125], [372, 126], [373, 127], [373, 128], [373, 129], 
            [374, 130], [374, 131], [374, 132], [375, 133], [375, 134], [375, 135], [375, 136], [376, 137], [376, 138], [376, 139], 
            [377, 140], [377, 141], [377, 142], [377, 143], [377, 144], [378, 145], [378, 146], [378, 147], [378, 148], [378, 149], 
            [378, 150], [379, 151], [379, 152], [379, 153], [379, 154], [379, 155], [379, 156], [380, 157], [380, 158], [380, 159], 
            [380, 160], [380, 161], [380, 162], [380, 163], [380, 164], [380, 165], [380, 166], [380, 167], [380, 168], [380, 169], 
            [380, 170], [380, 171], [381, 172], [381, 173], [381, 174], [381, 175], [381, 176], [381, 177], [381, 178], [381, 179], 
            [381, 180], [381, 181], [381, 182], [381, 183], [381, 184], [381, 185], [381, 186], [381, 187], [381, 188], [381, 189], 
            [381, 190], [381, 191], [381, 192], [381, 193], [381, 194], [381, 195], [381, 196], [381, 197], [381, 198], [381, 199], 
            [381, 200], [381, 201], [381, 202], [381, 203], [381, 204], [380, 205], [380, 206], [380, 207], [380, 208], [380, 209], 
            [380, 210], [380, 211], [379, 212], [379, 213], [379, 214], [379, 215], [379, 216], [379, 217], [378, 218], [378, 219], 
            [378, 220], [378, 221], [377, 222], [377, 223], [377, 224], [377, 225], [376, 226], [376, 227], [376, 228], [375, 229], 
            [375, 230], [375, 231], [374, 232], [374, 233], [374, 234], [373, 235], [373, 236], [372, 237], [372, 238], [372, 239], 
            [372, 240], [371, 241], [371, 242], [370, 243], [370, 244], [369, 245], [369, 246], [368, 247], [368, 248], [367, 249], 
            [367, 250], [366, 251], [366, 252], [365, 253], [365, 254], [364, 255], [363, 256], [363, 257], [362, 258], [362, 259], 
            [361, 260], [360, 261], [359, 262], [358, 263], [358, 264], [357, 265], [356, 266], [356, 267], [355, 268], [355, 269], 
            [354, 270], [353, 271], [352, 272], [352, 273], [351, 274], [350, 275], [349, 276], [348, 277], [347, 278], [346, 279], 
            [345, 280], [344, 281]
            ]

        self.Countour13=[[312, 247], [313, 247], [314, 247], [315, 247], [316, 246], [317, 246], [318, 247], [319, 247], [320, 247], [321, 247], [322, 247], [323, 247],
            [324, 248], [325, 248], [326, 248], [327, 249], [328, 250], [329, 250], [330, 251], [331, 252], [332, 253], [333, 254], [334, 255], [334, 256],
            [335, 257], [335, 258], [336, 259], [336, 260], [336, 261], [337, 262], [337, 263], [337, 264], [337, 265], [338, 266], [338, 267], [338, 268],
            [338, 269], [338, 270], [339, 271], [339, 272], [339, 273], [339, 274], [339, 275], [339, 276], [339, 277], [339, 278], [339, 279], [339, 280],
            [339, 281], [339, 282], [339, 283], [339, 284], [339, 285], [339, 286], [339, 287], [339, 288], [339, 289], [339, 290], [339, 291], [339, 292],
            [339, 293], [339, 294], [339, 295], [339, 296], [339, 297], [339, 298], [339, 299], [339, 300], [338, 301], [338, 302], [338, 303], [338, 304],
            [337, 305], [337, 306], [337, 307], [337, 308], [336, 309], [336, 310], [336, 311], [335, 312], [334, 313], [333, 314], [332, 314], [331, 315],
            [330, 315], [329, 315], [328, 315], [327, 314], [326, 314], [325, 313], [324, 313], [323, 312], [322, 311], [321, 311], [320, 310], [319, 309],
            [318, 308], [317, 307], [316, 306], [315, 305], [315, 304], [314, 303], [313, 302], [312, 301], [311, 300], [310, 299], [309, 298], [308, 297],
            [307, 296], [307, 295], [306, 294], [305, 293], [304, 292], [304, 291], [303, 290], [302, 289], [302, 288], [301, 287], [301, 286], [300, 285],
            [299, 284], [299, 283], [298, 282], [298, 281], [297, 280], [297, 279], [296, 278], [296, 277], [296, 276], [295, 275], [295, 274], [295, 273],
            [294, 272], [294, 271], [294, 270], [294, 269], [294, 268], [294, 267], [293, 266], [294, 265], [294, 264], [294, 263], [294, 262], [295, 261],
            [295, 260], [296, 259], [296, 258], [297, 257], [298, 256], [299, 255], [299, 254], [300, 253], [301, 252], [302, 252], [303, 251], [304, 250],
            [305, 250]]

        self.Countour7=[
            [313, 302], [314, 303], [315, 304], [314, 305], [313, 305], 
            [312, 306], [311, 306], [310, 307], [309, 307], [308, 308], 
            [307, 308], [306, 309], [305, 309], [304, 310], [303, 310], 
            [302, 311], [301, 311], [300, 312], [299, 312], [298, 312], 
            [297, 313], [296, 313], [295, 313], [294, 314], [293, 314], 
            [292, 315], [291, 315], [290, 315], [289, 316], [288, 316], 
            [287, 316], [286, 316], [285, 317], [284, 316]
            ]
        self.Countour21=[[212, 128], [213, 128], [214, 128], [215, 128], [216, 129], [217, 129], [218, 129], [219, 129], [220, 129], [221, 130], 
            [222, 130], [223, 130], [224, 131], [225, 131], [226, 132], [227, 132], [228, 133], [229, 133], [230, 134], [231, 134], 
            [232, 135], [233, 136], [234, 137], [235, 138], [236, 138], [237, 139], [238, 140], [239, 141], [239, 142], [240, 143], 
            [241, 144], [242, 145], [242, 146], [243, 147], [243, 148], [244, 149], [245, 150], [245, 151], [245, 152], [246, 153], 
            [246, 154], [246, 155], [247, 156], [247, 157], [247, 158], [247, 159], [247, 160], [248, 161], [248, 162], [248, 163], 
            [248, 164], [248, 165], [248, 166], [248, 167], [248, 168], [248, 169], [248, 170], [247, 171], [247, 172], [247, 173], 
            [247, 174], [247, 175], [246, 176], [246, 177], [246, 178], [245, 179], [245, 180], [245, 181], [244, 182], [244, 183], 
            [243, 184], [242, 185], [242, 186], [241, 187], [240, 188], [239, 189], [239, 190], [238, 191], [237, 192], [236, 193], 
            [235, 194], [234, 194], [233, 195], [232, 196], [231, 197], [230, 197], [229, 198], [228, 199], [227, 199], [226, 200], 
            [225, 200], [224, 200], [223, 201], [222, 201], [221, 201], [220, 202], [219, 202], [218, 202], [217, 202], [216, 202], 
            [215, 203], [214, 203], [213, 203], [212, 203], [211, 203], [210, 203], [209, 203], [208, 203], [207, 203], [206, 203], 
            [205, 202], [204, 202], [203, 202], [202, 202], [201, 202], [200, 201], [199, 201], [198, 201], [197, 200], [196, 200], 
            [195, 200], [194, 199], [193, 198], [192, 198], [191, 197], [190, 197], [189, 196], [188, 195], [187, 194], [186, 194], 
            [185, 193], [184, 192], [183, 191], [183, 190], [182, 189], [181, 188], [180, 187], [179, 186], [179, 185], [178, 184], 
            [178, 183], [177, 182], [177, 181], [176, 180], [176, 179], [175, 178], [175, 177], [175, 176], [174, 175], [174, 174], 
            [174, 173], [174, 172], [174, 171], [173, 170], [173, 169], [173, 168], [173, 167], [173, 166], [173, 165], [173, 164], 
            [173, 163], [173, 162], [173, 161], [174, 160], [174, 159], [174, 158], [174, 157], [174, 156], [175, 155], [175, 154], 
            [175, 153], [176, 152], [176, 151], [177, 150], [177, 149], [178, 148], [178, 147], [179, 146], [179, 145], [180, 144], 
            [181, 143], [182, 142], [183, 141], [183, 140], [184, 139], [185, 138], [186, 138], [187, 137], [188, 136], [189, 135], 
            [190, 134], [191, 134], [192, 133], [193, 133], [194, 132], [195, 132], [196, 131], [197, 131], [198, 130], [199, 130], 
            [200, 130], [201, 129], [202, 129], [203, 129], [204, 129], [205, 129], [206, 128], [207, 128], [208, 128]]

        self.Countour19=[[220, 158], [221, 158], [222, 159], [223, 159], [224, 159], [225, 160], [226, 161], [227, 162], [228, 163], [229, 164], 
            [230, 165], [230, 166], [230, 167], [231, 168], [231, 169], [231, 170], [231, 171], [231, 172], [231, 173], [231, 174], 
            [230, 175], [230, 176], [230, 177], [229, 178], [228, 179], [228, 180], [227, 181], [226, 181], [225, 182], [224, 183], 
            [223, 183], [222, 184], [221, 184], [220, 184], [219, 184], [218, 184], [217, 184], [216, 183], [215, 183], [214, 183], 
            [213, 182], [212, 181], [211, 180], [210, 179], [209, 178], [209, 177], [208, 176], [208, 175], [207, 174], [207, 173], 
            [207, 172], [207, 171], [207, 170], [207, 169], [207, 168], [208, 167], [208, 166], [209, 165], [209, 164], [210, 163], 
            [211, 162], [212, 161], [213, 160], [214, 159], [215, 159], [216, 159], [217, 158], [218, 158], [219, 159]]

        self.Countour20=[[290, 128], [291, 128], [292, 128], [293, 128], [294, 129], [295, 129], [296, 129], [297, 129], [298, 129], [299, 130], 
            [300, 130], [301, 130], [302, 131], [303, 131], [304, 131], [305, 132], [306, 133], [307, 133], [308, 134], [309, 134], 
            [310, 135], [311, 136], [312, 137], [313, 137], [314, 138], [315, 139], [316, 140], [317, 141], [317, 142], [318, 143], 
            [319, 144], [320, 145], [320, 146], [321, 147], [322, 148], [322, 149], [323, 150], [323, 151], [324, 152], [324, 153], 
            [324, 154], [325, 155], [325, 156], [325, 157], [325, 158], [325, 159], [326, 160], [326, 161], [326, 162], [326, 163], 
            [326, 164], [326, 165], [326, 166], [326, 167], [326, 168], [326, 169], [326, 170], [325, 171], [325, 172], [325, 173], 
            [325, 174], [325, 175], [324, 176], [324, 177], [324, 178], [323, 179], [323, 180], [322, 181], [322, 182], [321, 183], 
            [321, 184], [320, 185], [319, 186], [318, 187], [318, 188], [317, 189], [316, 190], [315, 191], [314, 192], [313, 193], 
            [312, 194], [311, 194], [310, 195], [309, 196], [308, 197], [307, 197], [306, 198], [305, 198], [304, 199], [303, 199], 
            [302, 200], [301, 200], [300, 200], [299, 201], [298, 201], [297, 201], [296, 202], [295, 202], [294, 202], [293, 202], 
            [292, 202], [291, 202], [290, 202], [289, 202], [288, 202], [287, 202], [286, 202], [285, 202], [284, 202], [283, 202], 
            [282, 202], [281, 202], [280, 201], [279, 201], [278, 201], [277, 200], [276, 200], [275, 200], [274, 199], [273, 199], 
            [272, 198], [271, 198], [270, 197], [269, 197], [268, 196], [267, 195], [266, 194], [265, 194], [264, 193], [263, 192], 
            [262, 191], [261, 190], [260, 189], [260, 188], [259, 187], [258, 186], [257, 185], [257, 184], [256, 183], [255, 182], 
            [255, 181], [254, 180], [254, 179], [254, 178], [253, 177], [253, 176], [253, 175], [252, 174], [252, 173], [252, 172], 
            [252, 171], [252, 170], [251, 169], [251, 168], [251, 167], [251, 166], [251, 165], [251, 164], [251, 163], [251, 162], 
            [251, 161], [252, 160], [252, 159], [252, 158], [252, 157], [252, 156], [253, 155], [253, 154], [253, 153], [254, 152], 
            [254, 151], [254, 150], [255, 149], [255, 148], [256, 147], [257, 146], [257, 145], [258, 144], [259, 143], [260, 142], 
            [260, 141], [261, 140], [262, 139], [263, 138], [264, 137], [265, 137], [266, 136], [267, 135], [268, 134], [269, 134], 
            [270, 133], [271, 133], [272, 132], [273, 132], [274, 131], [275, 131], [276, 130], [277, 130], [278, 130], [279, 129], 
            [280, 129], [281, 129], [282, 129], [283, 129], [284, 128]]

        self.Countour18=[[283, 158], [284, 159], [285, 159], [286, 159], [287, 160], [288, 161], [289, 161], [290, 162], [290, 163], [291, 164], 
            [292, 165], [292, 166], [292, 167], [293, 168], [293, 169], [293, 170], [293, 171], [293, 172], [293, 173], [292, 174], 
            [292, 175], [292, 176], [291, 177], [290, 178], [290, 179], [289, 180], [288, 180], [287, 181], [286, 182], [285, 182], 
            [284, 183], [283, 183], [282, 183], [281, 183], [280, 183], [279, 183], [278, 183], [277, 182], [276, 182], [275, 181], 
            [274, 180], [273, 180], [272, 179], [272, 178], [271, 177], [270, 176], [270, 175], [270, 174], [269, 173], [269, 172], 
            [269, 171], [269, 170], [269, 169], [269, 168], [270, 167], [270, 166], [271, 165], [271, 164], [272, 163], [272, 162], 
            [273, 161], [274, 161], [275, 160], [276, 159], [277, 159], [278, 159], [279, 158]]

        self.Countour15=[[293, 240], [294, 239], [295, 239], [296, 240], [297, 241], [298, 242], [298, 243], [298, 244], [297, 245], [297, 246], 
            [297, 247], [296, 248], [296, 249], [296, 250], [295, 251], [295, 252], [295, 253], [294, 254], [294, 255], [294, 256], 
            [293, 257], [293, 258], [293, 259], [292, 260], [292, 261], [292, 262], [292, 263], [292, 264], [291, 265], [291, 266], 
            [291, 267], [291, 268], [290, 269], [290, 270], [290, 271], [290, 272], [290, 273], [289, 274], [289, 275], [289, 276], 
            [289, 277], [289, 278], [288, 279], [288, 280], [288, 281], [288, 282], [288, 283], [288, 284], [288, 285], [287, 286], 
            [287, 287], [287, 288], [287, 289], [287, 290], [287, 291], [287, 292], [287, 293], [286, 294], [286, 295], [286, 296], 
            [286, 297], [286, 298], [286, 299], [286, 300], [286, 301], [286, 302], [285, 303], [285, 304], [285, 305], [285, 306], 
            [285, 307], [285, 308], [285, 309], [284, 310], [284, 311], [284, 312], [284, 313], [284, 314], [284, 315], [284, 316], 
            [285, 317], [285, 318], [284, 319], [284, 320], [284, 321], [284, 322], [284, 323], [284, 324], [284, 325], [284, 326], 
            [284, 327], [284, 328], [284, 329], [284, 330], [284, 331], [284, 332], [284, 333], [284, 334], [284, 335], [284, 336], 
            [284, 337], [284, 338], [284, 339], [284, 340], [284, 341], [284, 342], [284, 343], [284, 344], [284, 345], [284, 346], 
            [284, 347], [284, 348], [284, 349], [284, 350], [284, 351], [284, 352], [284, 353], [284, 354], [284, 355], [285, 356], 
            [285, 357], [285, 358], [285, 359], [285, 360], [285, 361], [285, 362], [285, 363], [285, 364], [285, 365], [285, 366], 
            [286, 367], [286, 368], [286, 369], [286, 370], [286, 371], [286, 372], [286, 373], [286, 374], [287, 375], [287, 376], 
            [287, 377], [287, 378], [287, 379], [287, 380], [287, 381], [287, 382], [287, 383], [287, 384], [287, 385], [287, 386], 
            [287, 387], [287, 388], [287, 389], [287, 390], [287, 391], [287, 392], [287, 393], [287, 394], [286, 395], [286, 396], 
            [286, 397], [285, 398], [285, 399], [285, 400], [284, 401], [284, 402], [284, 403], [283, 404], [283, 405], [282, 406], 
            [281, 406], [280, 407], [280, 408], [279, 409], [278, 410], [277, 411], [277, 412], [276, 413], [275, 414], [274, 415], 
            [274, 416], [273, 417], [272, 418], [272, 419], [271, 420], [270, 420], [269, 421], [268, 422], [267, 422], [266, 423], 
            [265, 424], [264, 425], [263, 426], [262, 426], [261, 427], [260, 427], [259, 428], [258, 428], [257, 428], [256, 429], 
            [255, 429], [254, 429], [253, 430], [252, 430], [251, 430], [250, 430], [249, 431], [248, 431], [247, 431], [246, 431], 
            [245, 431], [244, 431], [243, 431], [242, 431], [241, 431], [240, 431], [239, 431], [238, 431], [237, 431], [236, 431], 
            [235, 431], [234, 431], [233, 430], [232, 430], [231, 430], [230, 430], [229, 429], [228, 429], [227, 429], [226, 429], 
            [225, 428], [224, 428], [223, 427], [222, 427], [221, 427], [220, 426], [219, 425], [218, 425], [217, 424], [216, 424], 
            [215, 423], [214, 422], [213, 421], [212, 421], [211, 420], [210, 419], [209, 418], [208, 417], [208, 416], [207, 415], 
            [206, 414], [205, 413], [205, 412], [204, 411], [203, 410], [203, 409], [202, 408], [201, 407], [201, 406], [200, 405], 
            [200, 404], [199, 403], [199, 402], [198, 401], [198, 400], [198, 399], [198, 398], [197, 397], [197, 396], [197, 395], 
            [196, 394], [196, 393], [196, 392], [196, 391], [196, 390], [196, 389], [196, 388], [196, 387], [196, 386], [196, 385], 
            [196, 384], [196, 383], [196, 382], [196, 381], [196, 380], [196, 379], [196, 378], [196, 377], [197, 376], [197, 375], 
            [197, 374], [197, 373], [198, 372], [198, 371], [198, 370], [199, 369], [199, 368], [200, 367], [200, 366], [201, 365], 
            [201, 364], [202, 363], [202, 362], [203, 361], [203, 360], [204, 359], [205, 358], [206, 357], [206, 356], [207, 355], 
            [208, 354], [209, 353], [210, 352], [211, 352], [212, 352], [213, 352], [214, 351], [215, 352]
            ]
        self.Countour16=[[215, 386], [214, 385], [213, 384], [213, 383], [213, 382], [213, 381], [213, 380], [213, 379], [213, 378], [213, 377], 
            [213, 376], [213, 375], [213, 374], [214, 373], [214, 372], [214, 371], [214, 370], [214, 369], [214, 368], [214, 367], 
            [214, 366], [214, 365], [214, 364], [214, 363], [215, 362], [215, 361], [215, 360], [215, 359], [215, 358], [215, 357], 
            [215, 356], [215, 355], [215, 354], [215, 353], [215, 352], [216, 351], [216, 350], [216, 349], [216, 348], [216, 347], 
            [216, 346], [216, 345], [216, 344], [216, 343], [216, 342], [216, 341], [216, 340], [216, 339], [216, 338], [216, 337], 
            [216, 336], [216, 335], [216, 334], [216, 333], [216, 332], [216, 331], [216, 330], [216, 329], [216, 328], [216, 327], 
            [216, 326], [216, 325], [216, 324], [216, 323], [216, 322], [215, 321], [215, 320], [215, 319], [216, 318], [216, 317], 
            [216, 316], [216, 315], [216, 314], [216, 313], [216, 312], [216, 311], [216, 310], [215, 309], [215, 308], [215, 307], 
            [215, 306], [215, 305], [214, 304], [214, 303], [214, 302], [214, 301], [214, 300], [214, 299], [214, 298], [214, 297], 
            [214, 296], [213, 295], [213, 294], [213, 293], [213, 292], [213, 291], [213, 290], [213, 289], [213, 288], [213, 287], 
            [213, 286], [213, 285], [212, 284], [212, 283], [212, 282], [212, 281], [212, 280], [211, 279], [211, 278], [211, 277], 
            [211, 276], [211, 275], [211, 274], [210, 273], [210, 272], [210, 271], [210, 270], [209, 269], [209, 268], [209, 267], 
            [209, 266], [209, 265], [208, 264], [208, 263], [208, 262], [208, 261], [207, 260], [207, 259], [207, 258], [206, 257], 
            [206, 256], [206, 255], [206, 254], [205, 253], [205, 252], [205, 251], [204, 250], [204, 249], [204, 248], [203, 247], 
            [203, 246], [202, 245], [202, 244], [202, 243], [202, 242], [202, 241], [203, 240], [204, 240], [205, 239]
            ]
        self.Countour14=[[192, 249], [193, 249], [194, 250], [195, 250], [196, 251], [197, 252], [198, 253], [199, 254], [200, 255], [201, 256], 
            [202, 257], [202, 258], [203, 259], [203, 260], [204, 261], [204, 262], [204, 263], [205, 264], [205, 265], [205, 266], 
            [205, 267], [205, 268], [205, 269], [204, 270], [204, 271], [204, 272], [204, 273], [204, 274], [203, 275], [203, 276], 
            [202, 277], [202, 278], [201, 279], [201, 280], [200, 281], [200, 282], [199, 283], [199, 284], [198, 285], [198, 286], 
            [197, 287], [197, 288], [196, 289], [195, 290], [195, 291], [194, 292], [193, 293], [193, 294], [192, 295], [191, 296], 
            [190, 297], [189, 298], [188, 299], [187, 300], [186, 301], [186, 302], [185, 303], [184, 304], [183, 305], [182, 306], 
            [181, 307], [180, 308], [179, 309], [178, 310], [177, 311], [176, 312], [175, 313], [174, 313], [173, 313], [172, 314], 
            [171, 314], [170, 314], [169, 315], [168, 315], [167, 314], [166, 314], [165, 313], [164, 312], [163, 311], [163, 310], 
            [162, 309], [162, 308], [162, 307], [162, 306], [161, 305], [161, 304], [161, 303], [161, 302], [160, 301], [160, 300], 
            [160, 299], [160, 298], [160, 297], [159, 296], [159, 295], [159, 294], [159, 293], [159, 292], [159, 291], [159, 290], 
            [159, 289], [159, 288], [159, 287], [159, 286], [159, 285], [159, 284], [159, 283], [159, 282], [159, 281], [159, 280], 
            [159, 279], [159, 278], [159, 277], [159, 276], [159, 275], [160, 274], [160, 273], [160, 272], [160, 271], [160, 270], 
            [161, 269], [161, 268], [161, 267], [161, 266], [161, 265], [162, 264], [162, 263], [162, 262], [162, 261], [163, 260], 
            [163, 259], [163, 258], [164, 257], [164, 256], [165, 255], [165, 254], [166, 253], [167, 252], [168, 251], [169, 250], 
            [170, 250], [171, 249], [172, 249], [173, 248], [174, 248], [175, 247], [176, 247], [177, 247], [178, 247], [179, 247], 
            [180, 247], [181, 246], [182, 246], [183, 246], [184, 247], [185, 247]
            ]
        self.Countour8=[[216, 315], [216, 316], [215, 317], [214, 317], [213, 316], [212, 316], [211, 316], [210, 316], [209, 315], [208, 315], 
            [207, 315], [206, 314], [205, 314], [204, 313], [203, 313], [202, 313], [201, 313], [200, 312], [199, 312], [198, 311], 
            [197, 311], [196, 310], [195, 310], [194, 309], [193, 309], [192, 308], [191, 308], [190, 308], [189, 307], [188, 306], 
            [187, 306], [186, 305], [185, 305], [184, 304], [185, 303]
            ]
        self.Countour17=[[223, 227], [223, 226], [223, 225], [224, 224], [225, 223], [226, 222], [227, 221], [228, 220], [229, 219], [230, 219], 
            [231, 218], [232, 217], [233, 217], [234, 216], [235, 216], [236, 215], [237, 215], [238, 214], [239, 214], [240, 214], 
            [241, 214], [242, 214], [243, 213], [244, 213], [245, 213], [246, 213], [247, 213], [248, 213], [249, 213], [250, 213], 
            [251, 213], [252, 213], [253, 213], [254, 213], [255, 214], [256, 214], [257, 214], [258, 214], [259, 214], [260, 215], 
            [261, 215], [262, 216], [263, 216], [264, 216], [265, 217], [266, 217], [267, 218], [268, 218], [269, 219], [270, 219], 
            [271, 220], [272, 221], [273, 222], [274, 222], [275, 223]
            ]
        self.Countour10=[[268, 257], [268, 258], [268, 259], [268, 260], [267, 261], [266, 262], [265, 262], [264, 262], [263, 262], [262, 261], 
            [261, 261], [260, 260], [259, 260], [258, 259], [257, 259], [256, 259], [255, 258], [254, 258], [253, 258], [252, 258], 
            [251, 258], [250, 258], [249, 258], [248, 258], [247, 258], [246, 258], [245, 258], [244, 258], [243, 258], [242, 259], 
            [241, 259], [240, 259], [239, 260], [238, 261], [237, 261], [236, 262], [235, 262], [234, 263], [233, 263], [232, 262]
            ]
        self.Countour9=[[265, 294], [264, 295], [263, 296], [262, 296], [261, 295], [260, 295], [259, 295], [258, 294], [257, 294], [256, 294], 
            [255, 293], [254, 293], [253, 293], [252, 293], [251, 292], [250, 292], [249, 292], [248, 292], [247, 292], [246, 292], 
            [245, 293], [244, 293], [243, 293], [242, 294], [241, 294], [240, 295], [239, 295], [238, 296], [237, 296], [236, 296], 
            [235, 296], [234, 295], [233, 294], [233, 293], [233, 292]
            ]

        







        self.point_jump=30
        self.goal_array=self.Countour24
        self.flag=False
        self.current_goal_index=0
        D_goal_x,D_goal_y=self.goal_array[self.current_goal_index]
        self.goal_x=D_goal_x-250
        self.goal_y=250-D_goal_y


    def initial_reach_callback(self,initial_reach_msg:Bool):
        '''
        Purpose:
        ---
        set self.flag to true when all True is publisihed in initial_reach topic by initializer node '''
        self.flag=initial_reach_msg.data

    def update_goal(self):

        '''
        Purpose:
        ---
        Update the current goal position to the next position in the array.
        '''

        D_goal_x,D_goal_y,=self.goal_array[self.current_goal_index]
        self.goal_x=D_goal_x-250
        self.goal_y=250-D_goal_y

        
        self.goal_theta=0

    def update_goal_array(self):

        '''
        Purpose:
        ---
        Update the current goal array to the next goal array (each goal array is a countour )
        and for each countour their is specific point_jump means if the countour .
        '''

        self.current_goal_index=0


        if self.current_goal_array_index==1:
            self.goal_array=self.Countour20
            self.point_jump=10
        elif self.current_goal_array_index==2:
            self.goal_array=self.Countour18
            self.point_jump=5
        elif self.current_goal_array_index==3:
            self.goal_array=self.Countour13
            self.point_jump=5
        elif self.current_goal_array_index==4:
            self.goal_array=self.Countour7
            self.point_jump=5
        elif self.current_goal_array_index==5:
            self.goal_array=self.Countour15
            self.point_jump=20
        elif self.current_goal_array_index==6:
            self.goal_array=self.Countour9
            self.point_jump=5
        elif self.current_goal_array_index==7:
            self.goal_array=self.Countour10
            self.point_jump=5
        elif self.current_goal_array_index==8:
            self.goal_array=self.Countour17
            self.point_jump=5


 

        D_goal_x,D_goal_y,=self.goal_array[self.current_goal_index]
        self.goal_x=D_goal_x-250
        self.goal_y=250-D_goal_y

        return



    def inverse_kinematics(self, v_x, v_y, v_theta):

        '''
        Purpose:
        ---
        Calculate wheel velocities based on the linear and angular velocities.

        Input Arguments:
        ---
        v_x : float
            Linear velocity in x-direction.
        v_y : float
            Linear velocity in y-direction.
        v_theta : float
            Angular velocity around the z-axis.

        Returns:
        ---
        servo_1 : int
            Velocity for servo 1.
        servo_2 : int
            Velocity for servo 2.
        servo_3 : int
            Velocity for servo 3.
        '''        



        v_1 = -0.33 * v_x + 0.577 * v_y + 0.33 * v_theta
        v_2 = -0.33 * v_x - 0.577 * v_y + 0.33 * v_theta  
        v_3 = 0.67 * v_x + 0.33 * v_theta

        v_1 = max(min(v_1, 1), -1)
        v_2 = max(min(v_2, 1), -1)
        v_3 = max(min(v_3, 1), -1)




        servo_1,servo_2,servo_3=self.convert_to_servo_scaled(v_1,v_2,v_3)
        return servo_1,servo_2,servo_3

    def convert_to_servo_scaled(self, v1, v2, v3):

        '''
        Purpose:
        ---
        Scale velocities to servo values.

        Input Arguments:
        ---
        v1 : float
            Velocity for servo 1.
        v2 : float
            Velocity for servo 2.
        v3 : float
            Velocity for servo 3.

        Returns:
        ---
        servo_1 : int
            Scaled velocity for servo 1.
        servo_2 : int
            Scaled velocity for servo 2.
        servo_3 : int
            Scaled velocity for servo 3.
        '''


        # Scale velocities to servo values
        servo_1 = int(90 * (-v1 + 1))
        servo_2 = int(90 * (-v2 + 1))
        servo_3 = int(90 * (-v3 + 1))
        '''by applying the below code servo will only stop moving for pwm value of 90 
          if the pwm vaue is in range between 91 to 98 servo_1 will not stop due of manufacturing issue of motors so i 
          forcefully move it by apply min pwm value for which servo_1 move (99) same in reverse direction and for all three servo 
        '''
        if 91<=servo_1<99:
            servo_1=99
        elif 89>=servo_1>81:
            servo_1=81

        if 91<=servo_2<99:
            servo_2=99
        elif 89>=servo_2>81:
            servo_2=81

        if 91<=servo_3<99:
            servo_3=99
        elif 89>=servo_1>81:
            servo_1=81


        return servo_1, servo_2, servo_3

    def publish_data(self, wheel_velocity1, wheel_velocity2, wheel_velocity3):
        
        '''
        Purpose:
        ---
        Encode data and publish wheel velocities and pen status.

        Input Arguments:
        ---
        wheel_velocity1 : float
            Velocity for wheel 1.
        wheel_velocity2 : float
            Velocity for wheel 2.
        wheel_velocity3 : float
            Velocity for wheel 3.
        '''

        
        # Encode data and publish
        encoded_data = int(round(wheel_velocity1 * 1e15) +
                           round(wheel_velocity2 * 1e9) +
                           round(wheel_velocity3 * 1e3))

        msg = Int64()
        msg.data = encoded_data

        pen_msg=Bool()

        # to go to the first goal position from home position without doing pen down motion 
        if (self.current_goal_index==0):
            pen_msg.data=False
        else:
            #for other goal position do pen down motion 
            pen_msg.data=True
        self.pen_pose_publisher.publish(pen_msg)

        self.wheel_velocity_publisher.publish(msg)

    def current_pose_subscription_callback(self, msg: Pose2D):

        '''
        Purpose:
        ---
        Callback function to update current pose of the bot and control its movement.

        Input Arguments:
        ---
        msg : Pose2D
            Current pose message containing position and orientation data.
        '''

        self.current_x = msg.x
        self.current_y = msg.y

        #change coodinate system from image coodinate system to arena coodinate system with center of arena is origin with y direction reversed of image coodinate 
        self.current_x=self.current_x-250
        self.current_y=250-self.current_y

        self.current_theta = msg.theta

        #calucuating error in global frame 
        error_x_global = self.goal_x - self.current_x
        error_y_global = self.goal_y - self.current_y
        error_theta = math.atan2(math.sin(self.goal_theta - self.current_theta), math.cos(self.goal_theta - self.current_theta))


        #calculating error in robot frame
        error_x_body = error_x_global * math.cos(self.current_theta) - error_y_global * math.sin(self.current_theta)
        error_y_body = error_x_global * math.sin(self.current_theta) + error_y_global * math.cos(self.current_theta)


        error_x_body = max(min(error_x_body, 100), -100)
        error_y_body = max(min(error_y_body, 100), -100)
        error_theta = max(min(error_theta, math.pi), -math.pi)


        # Calculate control velocities
        v_x = self.kp * error_x_body
        v_y = self.kp * error_y_body
        v_theta =110*self.kp * error_theta

        
        #calcuate pwm values based on control velocity
        self.right_wheel_velocity, self.left_wheel_velocity, self.rear_wheel_velocity = self.inverse_kinematics(v_x, v_y, v_theta)

        # Publish velocities
        if (not((-3 < error_x_body < 3) and (-0.05 < error_theta < 0.05) and (-3 < error_y_body < 3))):

            # publish velocity if not reach the goal in certain error range 

            self.publish_data(self.right_wheel_velocity, self.left_wheel_velocity, self.rear_wheel_velocity)

        else:
            #if it reached a goal points
            print("goal_point reach") 
            if self.current_goal_index >= len(self.goal_array)-1:
                print("countour completed")
                #check if it is the last term of last countour
                #send bool msg to stopper to stop the evaluator as this bot has completed it's run 
             
                if self.current_goal_array_index==self.number_of_countours-1:
                    bool_msg=Bool()
                    bool_msg.data=True
                    self.completion_publisher.publish(bool_msg)
                    self.get_logger().warn("completed run")
                    time.sleep(1)
                    rclpy.shutdown()

                else:
                    #occur when its is last term of a countour (goal_array) but now the last term of last countour
                    self.current_goal_array_index=self.current_goal_array_index+1
                    self.update_goal_array()


            else:
                #goal to the next goal it has reached the end of list
                # if it reached in the starting position send bool msg to initilizer to send msg that this bot has reached to it's initial position 
                if self.current_goal_index==0:
                    bot2_initial_msg=Bool()
                    bot2_initial_msg.data=True
                    self.bot2_initial_publisher.publish(bot2_initial_msg)
                #check if all the bot has reached it's initial positon (tell by initilizer node  by /initial_reach topic )
                if (self.flag):
                    self.current_goal_index=self.current_goal_index+self.point_jump
                    #to check if adding self.point_jump to current_goal_index do not exceed the size of self.goal
                    if self.current_goal_index>len(self.goal_array)-1:
                        self.current_goal_index=len(self.goal_array)-1
                    self.update_goal()


        

def main(args=None):

    '''
    Purpose:
    ---
    Main function to initialize ROS 2 node and spin the controller node.

    Input Arguments:
    ---
    args : list
        List of input arguments from command line. Defaults to None.
    '''


    rclpy.init(args=args)
    node = ControllerBot1Node()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == "__main__":
    main()
